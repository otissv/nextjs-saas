import * as React from 'react'
import { Inter } from 'next/font/google'
import { getServerSession } from 'next-auth/next'
import { notFound } from 'next/navigation'

import '@/app/[locale]/global.css'
import { LoggedOutMenu } from '@/components/main-menu'
import { cn } from '@/lib/utils'
import { Sidebar } from '@/components/sidebar'
import { PageParams, UserSession } from '@/types'
import { MenuItem, menu } from './menu'
import { useLocale } from '@/hooks/useLocale'
import { TranslationProvider } from '@/components/translations-provider'
import Link from 'next/link'
import { MenuToggle } from '@/components/menu-toggle'
import { Toaster } from '@/components/toaster'
import { ThemeProvider } from '@/components/theme-provider'
import { TailwindIndicator } from '@/components/ui/tailwind-indicator'
import { PageContainer } from '@/components/ui/page-container'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export interface RootLayoutProps {
  children: React.ReactNode
  params: PageParams
}

export default async function RootLayout({
  children,
  params,
}: RootLayoutProps) {
  const locale = useLocale(params)

  // Show a 404 error if the user requests an unknown locale
  if (params.locale !== locale) {
    notFound()
  }

  const session = await getServerSession()
  const user: UserSession = session?.user || {}

  const items = await menu()

  return (
    <html lang={locale} suppressHydrationWarning className="dark">
      <body
        className={cn(
          inter.className,
          'w-full min-h-screen bg-background font-sans antialiased'
        )}
      >
        <TranslationProvider locale={locale}>
          <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
            {session ? (
              <LoggedIn user={user} items={items}>
                {children}
              </LoggedIn>
            ) : (
              <LoggedOut> {children}</LoggedOut>
            )}
            <Toaster />
            <TailwindIndicator />
          </ThemeProvider>
        </TranslationProvider>
      </body>
    </html>
  )
}

function LoggedIn({
  children,
  user,
  items,
}: {
  children: React.ReactNode
  user: UserSession
  items: MenuItem[]
}) {
  return (
    <PageContainer>
      <div className="flex flex-col">
        <div className="flex items-center h-10 mb-4">
          <MenuToggle title="toggle menu" />
          <Link href="/">App Name</Link>
        </div>
      </div>
      <div className="flex items-start">
        <Sidebar items={items} user={user} isOpen={true} />
        <main className="flex-1">{children}</main>
      </div>
    </PageContainer>
  )
}

function LoggedOut({ children }: { children: React.ReactNode }) {
  return (
    <div>
      <LoggedOutMenu />
      {children}
    </div>
  )
}
